一、网络编程概述
	计算机通过网络连接 就组成了计算机网络 可以通过计算机网络在多个计算机之间实现通信。
	java提供了网络编程相关的API 来实现基于java的网络编程

	网络模型
		OSI七层网络模型
		物理层 数据链路层 网络层 传输层 会话层 表示层 应用层
		
	协议
		协议就是网络预先规定好的通信的规范 协议会归属在网络七层中的某一层 来解决该层中的相关问题
		协议分为公有协议 和 私有协议
			公有协议:
				是由国际化的标准组织定义的协议，全世界所有的计算都会去遵循：
					网络层：IP
					传输层：UDP TCP
					应用层：FTP POP3 SMTP HTTP HTTPS 
			私有协议:
				不同通用的协议，而是由个别组织、公司、个人定义的一些通信规范，只在约定好的小范围内使用，解决小范围内具体应用场景下特定的问题。

	IP地址
		IP地址是IP协议中规定的计算机在网络中的唯一标识，在网络中通过IP地址寻找一台计算机，从而实现通信。
		IP协议分为两个版本：
			IPv4版本：
				32位二进制表示的地址，用冒号分割为四段，用十进制表示
				用冒号分为四段，每段可以取0~255的值，所以可以直到IPv4最多可以表示4294967296个地址
				
				0~255:0~255:0~255:0~255
				IPv4地址已经严重不足 目前 让然在通过划分子网 动态ip等等机制来缓解IPv4紧张的问题 但是IPv4地址的枯竭是必然在不久的将来会发生的事
				最终解决方案，整个互联网会逐渐过渡到IPv6，解决地址不足的问题

				**127.0.0.1是一个特殊的IP永远指向当前及其自身
			IPv6版本：
				128位的二进制表示的地址，可以表示2^128个地址
				

	端口
		每个计算机 除了可以分配到一个IP以外 还会划分出2^16个端口
		需要网络通信的软件 可以 来占用一个端口 通过 ip：端口 在指定ip的指定端口上进行通信
		虽然ip只有一个，但是端口有很多，所以可以在一个ip上利用不同端口 实现同时进行多个通信的效果
		
		0~65535
		其中0~1024的端口是计算机预留的端口 普通程序不可以占用
		其他端口应用程序随便占用，先到先得，同一时间一个端口只能有一个程序占用，所以用完后端口会被释放，其他程序才可以再次占用。
		
	域名解析
		IP地址可以表示网络中的主机 但是ip不易记忆 所以一帮都会选择为当前主机 指定主机名 或 域名
		网络中有 DNS服务器中可以 帮我们将 主机名或域名翻译成对应ip
		也可以在本地的hosts文件中模拟dns的功能

二、java中的网络编程
	在java中提供了API可以用来基于 网络层 和 传输层 来开发更高层（应用层）的代码 实现网络程序的开发
	利用这套基于 网络层 和 传输层进行编程的 API进行网络开发 称之为 Socket编程 -- 套接字编程

	1.代表IP地址的类 - java.net.InetAddress
		此类表示互联网协议 (IP) 地址。
		构造方法：
			没有提供共有构造方法 无法直接创建
		普通方法：
			static InetAddress getLocalHost() //获取代表本机ip或主机名的InetAddress对象
			static InetAddress getByName(String host) //获取代表指定ip或主机名的InetAddress对象
			
 			String getHostAddress()  //获取当前InetAddress对象代表的主机的ip的字符串形式
 			String getHostName()  //获取当前InetAddress对象代表的主机的主机名的字符串形式

 	2.代表socket中地址的类 - SocketAddress - InetSocketAddress
 		构造方法：
 			InetSocketAddress(InetAddress addr, int port) 	
 			InetSocketAddress(String hostname, int port) 
 		方法：
			InetAddress getAddress()  
			String getHostName()  
			int getPort() 
			 
	3.UDP通信 -- 写信
		不需要创建连接
		通过发送数据包通信 每个数据包最大64KB
		不可靠的传输机制
		传输速度比较快
		追求速度快 可靠性要求不高的场景下 - 视频聊天

		java.net.DatagramSocket 
			实现UDP通信的套接字
			构造方法：
				DatagramSocket() 
				DatagramSocket(int port) 
			方法：
				void send(DatagramPacket p)  
				void receive(DatagramPacket p)  

		java.net.DatagramPacket
			表示数据报包的类
			构造方法：
				DatagramPacket(byte[] buf, int length)
			方法：
				InetAddress getAddress()  
				byte[] getData() 
				int getLength()  
				int getPort()  
				SocketAddress getSocketAddress()  
				void setAddress(InetAddress iaddr)  
				void setData(byte[] buf) 
				void setPort(int iport) 
				void setSocketAddress(SocketAddress address)  

			案例：UDP入门案例
			案例：利用UDP通信实现聊天程序
				两个线程：
					一个线程负责从控制台接收数据 发送给 指定人
					另一个线程负责监听指定端口 接收数据报包 打印到控制台
	4.TCP通信 -- 打电话
		需要先创建连接 - 并且在创建连接的过程中 需要经过三次握手
		底层通过 流 发送数据 数据没有大小限制
		可靠的传输机制 - 丢包重发 包的顺序的保障
		传输速度相对比较慢
		对于速度要求不太高 但是对可靠性要求比较高的场景下 - 文件上传 下载

		因为TCP在通信的过程中 是需要创建连接的 连接的发起者称为客户端 监听端口等待被连接的一端称为服务端

		代表TCP通信中的客户端的类：
			Socket:
			构造方法:
				Socket()
				Socket(InetAddress address, int port) 
				Socket(String host, int port) 
			方法：
				void connect(SocketAddress endpoint) //连接指定服务器  
				OutputStream getOutputStream()  //获取到连接到的服务器的输出流 可以向服务器中发送数据
				InputStream getInputStream()  //获取从连接到的服务器得到的输入流 可以从服务器中获取数据
				InetAddress getInetAddress() //获取地址
				int getPort() //获取端口  
				shutdownInput() //此套接字的输入流置于“流的末尾”。
				shutdownOutput() //此套接字的输出流置于“流的末尾”。
				void close() //关闭套接字 关闭此套接字也将会关闭该套接字的InputStream 和 OutputStream

		代表TCP通信中的服务端类:
			ServerSocket
				构造方法：
					ServerSocket()
					ServerSocket(int port)
				方法:
					void bind(SocketAddress endpoint)  //绑定指定端口
					Socket accept() //接收客户端连接的方法
					InetAddress getInetAddress()  //获取ip
					void close()  //关闭套接字
			**ServerSocket只负责监听端口等待连接 当有连接过来时创建Socket 真正的通信是在两个Socket之间进行的

		案例：TCP实现客户端向服务端发送数据
		案例：TCP实现客户端和服务端双向发送数据

	5.TCP通信中的粘包问题
		粘包问题产生的原因：
			tcp底层通过流的方式传输数据 而流本身没有边界的概念 所以当通过tcp发送多段数据时 接收方 收到数据 无法判断数据的边界 因此无法正确解析数据 这样的问题 称之为粘包问题
			tcp协议本身没有对粘包问题提供解决方案，因为tcp是传输层的协议，这个问题不属于传输层，需要使用更高层的协议来解决
			
		粘包问题的解决：
			方案1：双方约定传输固定长度的数据 缺点是很不灵活 数据长度限制死了 不适合 传输内容不确定的场景
			方案2：约定特殊分隔符 缺点是 如果数据中本身就有分隔符 需要转义 很麻烦
			方案3：通过协议解决 之所以有粘包的问题 是因为TCP协议是传输层的协议 解决不了更高层的问题 此时可以通过 应用更高层的协议 解决 可以使用公有协议 也可以自己定义私有协议 来解决问题

		案例：TCP实现私有协议解决多次发送数据时 粘包问题

		案例(了解)：实现 文件 上传服务器
		案例(了解)：实现 文件 下载服务器
		