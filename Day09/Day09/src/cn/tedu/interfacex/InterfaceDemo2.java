package cn.tedu.interfacex;

public class InterfaceDemo2 {

	public static void main(String[] args) {

		// A a = new B1();

		// 在Java中支持的是类和类之间的单继承
		// 所以此时会形成一棵继承结构树
		// 所以比较容易的就能确定两个类之间是否有继承关系
		// 因此在进行强制转换的时候
		// 会检查要转换的对象的声明类和转换的类型是否有继承关系
		// a对象的声明类型是A类，要转换的类型是B1
		// B1继承了A，所以在编译时期就不报错
		// 到了运行的时候才会检查对象的实际类型和要转换的类型是否一致
		// 运行的时候，发现a的实际类型是B1,要转换的类型是B1
		// 类型一致，允许转换
		// B1 b1 = (B1) a;

		// a对象的声明类型是A类，要转换的类型是B2
		// B2继承了A，所以在编译时期就不报错
		// 到了运行的时候，a的实际类型是B1,要转换的类型是B2
		// 类型不一致，所以报错 --- ClassCastException
		// B2 b2 = (B2) a;

		// b1对象的声明类型B1类，要转换的是B2
		// B2没有继承B1，编译就不通过
		// B2 b2 = (B2) b1;

		// C c = (C) a;

		// 在Java中，类和接口之间是多实现，接口和接口之间是多继承
		// 所以构成了一张图状结构 --- 网状结构
		// 不容易确定两个节点之间的关系
		// 因此在编译时期为了提高效率放弃检查
		// 直到运行的时候再确定类型是否相同
		// D d = (D) a;

		// C c = new C();
		// D d = (D) c;

	}

}

class A {
}

class B1 extends A {
}

class B2 extends A {
}

class C {
}

interface D {
}