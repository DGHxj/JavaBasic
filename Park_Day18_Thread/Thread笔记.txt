一、多线程
	1.多线程概念
		进程：操作系统中独立运行的程序或服务通常就是一个进程。计算机中可以同时运行多个进程。

		线程：一个进程内部，还可以分割为多个并发的线程，每个线程都可以独立的执行相关的任务。一个线程可以认为是程序执行的一条执行路径，在需要时可以在程序中开辟更多执行路径来并行的执行任务。当在一个进程中开启多个线程从而在并行的执行多个任务时，这就是一个多线程的程序。

		当程序开启多个线程时，多个线程抢夺cpu，哪个线程抢夺到哪个线程就可以执行，通过不停的抢夺cpu，多个线程都可以得到执行，而cpu处理的速度非常的快，切换线程也非常的快，所以在人看起来这些线程似乎都在并行的执行。

		java本身就支持多线程的开发。

		jvm虚拟机本身也是个进程，可以通过代码在jvm虚拟机进程中开启多个线程，从而开发多线程的程序。

	2.java中多线程的开发
		java中有代表线程的类，java.lang.Thread
		在这个类中，提供了创建线程、启动线程、操作线程、控制线程等相关的方法，是java多线程开发的核心类。
		
		java开发多线程程序
			方式1：
				写一个类继承Thread类 覆盖父类中的run方法 在run方法中实现线程要执行的代码 就可以开发出一个线程了
				线程开发完成后并不会自动执行，需要创建改类的对象后 调用该对象的start方法，启动线程。
			
				案例：用方式1开启多线程	

			方式2：
				写一个类实现Runnable接口，在实现类中实现接口中定义的run方法，在run方法中编写线程要执行的代码。
				new Thread(runnable)在参数中传入runnable实现类的对象，再调用start()方法 就可以启动线程

				案例：用方式2开启多线程

			
		通过观察发现，多个线程的执行的先后顺序并没有任何规律，谁抢到cpu谁就执行。

	3.线程的状态切换
		线程由如下的几个状态
			未启动：线程对象被创建出来，但是还没有执行start(),并未执行起来
			冻结：线程启动了起来，有抢夺执行权限，参与抢夺cpu，但是未抢到cpu状态下，不能得到执行。
			执行：线程启动了起来，抢到了cpu，在执行
			挂起：线程启动了起来，但是通过sleep或wait进入挂起状态，没有执行权限，不再抢夺cpu，直到sleep结束或wait()被notify或notifyAll方法唤醒，重新进入冻结状态，开始抢夺cpu
			结束：线程启动了起来，执行结束或被中断，则线程结束，释放占用的内存和cpu。

		状态转换的过程：参考图

	4.线程中的常用方法
		static Thread currentThread() 获取当前正在执行的线程
		long getId()  获取线程的编号，每个线程在执行的过程中，jvm都会为其分配独一无二的编号来唯一的进行表示，可以通过这个方法获取线程的id
		String getName()  获取线程的名称，每个线程在执行的过程中，jvm都会为其分配一个名称，这个名称可以通过getName来获取
		void setName(String name)  设置线程的名字
		Thread.State getState() 获取线程的状态
 		void interrupt() 中断线程
		static void sleep(long millis) 让当前线程进入休眠状态，被挂起，放弃执行权，不再抢夺cpu，持续指定的时间
		int getPriority()  获取当前线程的优先级
		void setPriority(int newPriority)  设置当前线程的优先级 优先级的取值范围为1~10 越大优先级越高 如果不设置 优先级为5
		**注意，Thread中虽然提供了stop方法，但是此方法已经被过时，不再有效,并且没有提供替代的方法，因为在线程执行的过程中强制退出，会具有固有的不安全性，可能造成很多意外的不符合预期的结果，所以Thread中现在没有一个明确的退出线程的方法，如果想要正常的退出线程，应该通过线程内代码的设计，来实现线程可以根据不同的状态，正常退出。或者当线程真的无法正常退出，需要强制退出时，可以选择interrupt方法中断执行。

	5.多线程并发安全问题
		当多个线程并发执行 并且 操作了同一个共享资源时，由于线程的执行先后顺序是不确定的，产生了一些意外的结果，这样的现象就称之为产生了多线程并发安全问题。
		并发安全问题产生的条件：
			多个线程参与
			有共享资源
			同时操作 且 对共享资源的修改

		